---
# Source: kyverno/templates/08-restart-on-secret-change.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restart-on-secret-change
  annotations:
    kyverno.io/kubernetes-version: "1.26"
    kyverno.io/kyverno-version: 1.11.1
    policies.kyverno.io/category: other
    policies.kyverno.io/minversion: 1.11.1
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Deployment/Daemonset/Statefulset
    policies.kyverno.io/title: Restart objects On Secret Change
    policies.kyverno.io/description: If Secrets are mounted in ways which do not naturally
      allow updates to be live refreshed it may be necessary to modify a Deployment/Daemonset/Statefulset.
      This policy watches a Secret and if it changes will write an annotation to one
      or more target Deployment/Daemonset/Statefulset thus triggering a new rollout and thereby refreshing
      the referred Secret. It may be necessary to grant additional privileges to the
      Kyverno ServiceAccount, via one of the existing ClusterRoleBindings or a new
      one, so it can modify Deployment/Daemonset/Statefulset.
spec:
  admission: true
  background: false
  mutateExistingOnPolicyUpdate: false
  validationFailureAction: Audit
  rules:
  - name: secret-updated
    context:
    - name: matchedSecretName
      variable:
        jmesPath: request.object.metadata.name
    match:
      any:
      - resources:
          kinds:
          - Secret
    preconditions:
    # The purpose of this ClusterPolicy rule to send rollout deployment/statefulset/daemonset kind which, 
    # must match 'kyverno.opso.lan/read' annotation key of the 'Secret' object with 'allow' value. If someone 
    # do changes inside of this secret data value and if for any deployment/statefulset/daemonset have anotation 
    # 'kyverno.opso.lan/secret_dorollout' with value 'allow' then, it will send rollout restart to this object
      all:
      - key: "{{ request.operation }}"
        operator: Equals
        value: UPDATE
      - key: '{{request.object.metadata.annotations."kyverno.opso.lan/read"}}'
        operator: Equals
        value: "allow"
      - key: "{{equal_fold('{{request.object.data}}', '{{request.oldObject.data}}')}}"
        operator: NotEquals
        value: true
    mutate:
      patchStrategicMerge:
        spec:
          template:
            metadata:
              annotations: 
                kyverno.opso.lan/secretversion: '{{request.object.metadata.resourceVersion}}'
      targets:
        - apiVersion: apps/v1
          kind: Deployment
          namespace: "{{request.object.metadata.namespace}}"
          preconditions:
            any:
            - key: "{{target.spec.template.spec.containers[].env[].valueFrom.secretKeyRef.name}}"
              operator: AnyIn
              value: '{{matchedSecretName}}'
            - key: "{{target.spec.template.spec.containers[].envFrom[].secretRef.name}}"
              operator: AnyIn
              value: '{{matchedSecretName}}'
            - key: "{{target.spec.template.spec.volumes[].secret.secretName}}"   
              operator: AnyIn
              value: '{{matchedSecretName}}'
        - apiVersion: apps/v1
          kind: DaemonSet
          namespace: "{{request.object.metadata.namespace}}"
          preconditions:
            any:
            - key: "{{target.spec.template.spec.containers[].env[].valueFrom.secretKeyRef.name}}"
              operator: AnyIn
              value: '{{matchedSecretName}}'
            - key: "{{target.spec.template.spec.containers[].envFrom[].secretRef.name}}"
              operator: AnyIn
              value: '{{matchedSecretName}}'
            - key: "{{target.spec.template.spec.volumes[].secret.secretName}}"   
              operator: AnyIn
              value: '{{matchedSecretName}}'
        - apiVersion: apps/v1
          kind: StatefulSet
          namespace: "{{request.object.metadata.namespace}}"
          preconditions:
            any:
            - key: "{{target.spec.template.spec.containers[].env[].valueFrom.secretKeyRef.name}}"
              operator: AnyIn
              value: '{{matchedSecretName}}'
            - key: "{{target.spec.template.spec.containers[].envFrom[].secretRef.name}}"
              operator: AnyIn
              value: '{{matchedSecretName}}'
            - key: "{{target.spec.template.spec.volumes[].secret.secretName}}"   
              operator: AnyIn
              value: '{{matchedSecretName}}'
